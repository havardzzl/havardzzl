解题思路
状态定义
定义 f(i)f(i) 为使数组 \texttt{arr1}arr1 的前 i+1i+1 项（下标 0\sim i0∼i）递增，且 保留 \texttt{arr1[i]}arr1[i] 的情况下的最小替换次数。

为什么要不替换 \texttt{arr1[i]}arr1[i] 呢？因为如果替换，那么到底替换成哪个数，就得另加一个状态维护。可如果 \texttt{arr1}arr1 的最后一项也要替换呢？我们可以在数组最后增加一个非常大的数，而这个数不替换即可。

状态转移
首先将 \texttt{arr2}arr2 从小到大排序，去重。
考虑 f(i)f(i)，由于我们不能替换 \texttt{arr1[i]}arr1[i]，那么我们考虑是否替换 \texttt{arr1[i-1]}arr1[i-1]（如果有）。

1° 如果 替换 \texttt{arr1[i-1]}arr1[i-1]：
\texttt{arr1[i-1]}arr1[i-1] 应当越大越好，但是不能等于或超过 \texttt{arr1[i]}arr1[i]。我们可以二分查找出 \texttt{arr2}arr2 中第一个等于或超过 \texttt{arr1[i]}arr1[i] 的数 \texttt{arr2[j]}arr2[j]，然后将 \texttt{arr1[i-1]}arr1[i-1] 替换为 \texttt{arr2[j-1]}arr2[j-1]。

我们可以继续考虑 \texttt{arr1[i-2]}arr1[i-2] （如果有），如果仍然想替换它，那么显然 \texttt{arr2[j-1]}arr2[j-1] 是不能再用了，应当选择更小一点的 \texttt{arr2[j-2]}arr2[j-2] （如果有）。以此类推，我们还可以继续把 \texttt{arr1[i-3]}arr1[i-3] 替换成 \texttt{arr2[j-3]}arr2[j-3]，等等等等，直到我们不想再替换。

设已经替换了 kk 个数而我们不想再替换了，那就意味着需要保留 \texttt{arr1[i-k-1]}arr1[i-k-1]，但这是有条件的，由于 \texttt{arr1[i-k]}arr1[i-k] 被替换成了 \texttt{arr2[j-k]}arr2[j-k]，故只有当 \texttt{arr1[i-k-1] < arr2[j-k]}arr1[i-k-1] < arr2[j-k] 才可以保证序列递增。若我们保留 \texttt{arr1[i-k-1]}arr1[i-k-1]，问题就可以被转化为 f(i-k-1)+kf(i−k−1)+k。

我们可以枚举 kk 进行状态转移。显然 kk 不能超过 jj，也就是最多可供替换的 \texttt{arr2}arr2 的数字个数；另外 kk 也不能超过 ii，也就是最多能被替换的 \texttt{arr1}arr1 的数字个数。

但是有个问题，如果 k=ik=i，那么 \texttt{arr1[i-k-1] = arr1[-1]}arr1[i-k-1] = arr1[-1] 是不存在的。解决方案是在 \texttt{arr1}arr1 之前添加一个非常小的数（如 -1−1），然后令 kk 不超过 i-1i−1 即可。此时的 \texttt{arr1[0]}arr1[0] 充当了前面的 \texttt{arr1[-1]}arr1[-1] 的作用。

2° 如果 保留 \texttt{arr1[i-1]}arr1[i-1]，则需要满足 \texttt{arr1[i-1] < arr1[i]}arr1[i-1] < arr1[i]，此时 f(i) = \min(f(i),f(i-1))f(i)=min(f(i),f(i−1))
综上所述，我们在 \texttt{arr1}arr1 的两侧加上哨兵： \texttt{arr1 = [-1] + arr1 + [inf]}arr1 = [-1] + arr1 + [inf]，然后按如下的转移方程执行即可：

\begin{aligned}f(0) =& \ 0 \\f(i) =& \min\left(f(i-k-1) + k\right), i \geq 1 \\ &\mathbf{where}\ 1\leq k \leq \min(i-1,j), \ \ \text{arr1}[i-k-1] < \text{arr2}[j-k] \\ f(i) =& \min(f(i),f(i-1))\ \mathbf{if}\ \text{arr1}[i] < \text{arr1}[i-1], i\geq 1\end{aligned}
f(0)=
f(i)=
f(i)=
​
  
 0
min(f(i−k−1)+k),i≥1
where 1≤k≤min(i−1,j),  arr1[i−k−1]<arr2[j−k]
min(f(i),f(i−1)) if arr1[i]<arr1[i−1],i≥1
​
 

代码
c++python3

class Solution:
    def makeArrayIncreasing(self, arr1: List[int], arr2: List[int]) -> int:
        # 预处理：排序，去重，加哨兵
        maxv = 1000000000
        arr1 = [-1] + arr1 + [maxv + 5]
        arr2 = sorted(list(set(arr2)))
        n = len(arr1)

        dp = [0] + [maxv]*(n-1)
        for i in range(1,n):
            j = bisect_left(arr2, arr1[i])
            for k in range(1, min(i-1, j) + 1):  # 1. 枚举替换的个数 k = 1 to min(i-1,j)
                if arr1[i-k-1] < arr2[j-k]:
                    dp[i] = min(dp[i], dp[i-k-1] + k)
            if arr1[i-1] < arr1[i]:          # 2. 不替换 arr1[i-1]
                dp[i] = min(dp[i], dp[i-1])

        return dp[-1] if dp[-1] < maxv else -1